#include "max_heap.h"
#include <iostream>
using namespace std;

template<typename k, typename v>
MaxHeap<k,v>::MaxHeap(){
  // default constructor
  arr = new HeapItem<k,v>();
  arr->capacity = 1;
  arr->totalItems =0;
  cout << "defalut constructor\n";
}
template<typename k, typename v>
MaxHeap<k,v>::MaxHeap(int _capacity){
  arr = new HeapItem<k,v>[_capacity];
  arr->capacity = _capacity;
  arr->totalItems =0;
}
template<typename k, typename v>
void MaxHeap<k,v>::insert(k key, v value){
  cout << "what\n";
}

template<typename k, typename v>
void MaxHeap<k,v>::move_up(int cindex,int pindex){
  if(pindex == 0){
    // base case
    HeapItem<k,v> *parent = arr[pindex];
    HeapItem<k,v> *child = arr[pindex];
    if(child > parent){
    HeapItem<k,v> *temp = arr[pindex];
    arr[pindex] = arr[cindex];
    arr[cindex] = temp;
    }
    return;
  }
  else{
  cindex = pindex;
  pindex = pindex/2;
  move_up(cindex,pindex);
  }
}

template<typename k, typename v>
void move_down(int cindex,int pindex){}

template<typename k, typename v>
void MaxHeap<k,v>::getMax(v &_value){}
template<typename k, typename v>
void MaxHeap<k,v>::deleteMax(){}
template<typename k, typename v>
bool MaxHeap<k,v>::isEmpty()const{}

template<typename k, typename v>
MaxHeap<k,v>::~MaxHeap(){
  cout << "heap destroyed...\n";
}
