	[org 0x0100]
	jmp start
	
array: dw 1,2,3,4,5,6,7,8,9

binSearch:
	push bp
	mov bp, sp
	push ax			; will be used for div purpose
	push si			; will be used for pointing to array
	push bx			; for off set of array
	push 0			; lower index of array
	push word [bp+6]	; upper index = length

whilelrns:
	;; while lower upper index not same
	mov ax, [bp-10]
	sub ax, [bp-8]		; upper index and lower index comparing
	cmp ax, 1
	jbe searchEnd

	mov ax, [bp-10]
	add ax, [bp-8]		; lower index + uppper index
	shr ax,1	      ; / by 2
	shl ax,1	      ; * by 2, floating point removed
	mov si,ax		; no need to divide because of word size
	add si,[bp+8]		; array[i]
	mov bx, [bp+4]		; bx = key
	cmp [si],bx		;
	ja greater		; array[i] > key; modify upper index
	cmp [si],bx		;
	jb smaller		; array[i] < key; modify lower index
	cmp [si],bx		;
	je found		; array[i] < key; modify lower index
searchEnd:
	mov si, [bp+8]		;
	shl ax,1			; make offset for word
	add si, ax		;
	mov bx, [bp+4]
	cmp [si], bx		;
	je found
	mov word [bp+10], 0 ;change flag
	add sp,4		; free lower and upper index
	pop bx
	pop si
	pop ax
	pop bp
	ret 6
found:
	mov word[bp+10], 1
	add sp,4		; free lower and upper index
	pop bx
	pop si
	pop ax
	pop bp
	ret 6

greater:
	shr ax,1			;
	mov [bp-10],ax		; uppper index has been reduced to half
	jmp whilelrns
smaller:
	shr ax,1
	mov [bp-8],ax		; lower index has been modified
	jmp whilelrns
start:
	push 0			; flag
	push array
	push 9			; length
	push 3			; to search
	call binSearch
	pop ax

	mov ax, 0x4c00
	int 0x21
